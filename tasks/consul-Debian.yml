---

- name: Setting private Ip of leader
  when: group_names[0] == "consul-leader"
  set_fact:
    ip_leader: "{{ ansible_default_ipv4.address }}"

- name: Installing unzip
  apt:
    name: unzip
    state: present

- name: Downloading archived consul binary
  when: (group_names[0] == "consul-leader") or (group_names[0] == "consul-server") or (group_names[0] == "consul-client")
  unarchive:
    src: "{{ consul_binary_url }}"
    dest: "{{ consul_binary_dir }}"
    owner: "{{ consul_binary_owner }}"
    group: "{{ consul_binary_group }}"
    remote_src: true

- name: Executing command to generate encrypt key
  when: group_names[0] == "consul-leader"
  command: consul keygen
  register: encr_key

- name: Stopping consul service if running
  when: (group_names[0] == "consul-leader") or (group_names[0] == "consul-server") or (group_names[0] == "consul-client")
  service:
    name: consul
    state: stopped
  ignore_errors: true

- name: Including file for consul user
  when: (group_names[0] == "consul-leader") or (group_names[0] == "consul-server") or (group_names[0] == "consul-client")
  include: consul-user.yml

- name: Creating a Consul service file
  when: (group_names[0] == "consul-leader") or (group_names[0] == "consul-server") or (group_names[0] == "consul-client")
  template:
    src: consul-service.j2
    dest: "{{ consul_service_file }}"

- name: Creating consul.hcl file
  when: (group_names[0] == "consul-leader") or (group_names[0] == "consul-server") or (group_names[0] == "consul-client")
  template:
    src: consul-hcl.j2
    dest: "{{ consul_hcl_dest }}"

- name: Creating server.hcl file for leader
  when: group_names[0] == "consul-leader"
  template:
    src: server-hcl-leader.j2
    dest: "{{ server_hcl_dest }}"
    owner: "{{ consul_owner }}"
    group: "{{ consul_group }}"
    mode: "{{ server_hcl_mode }}"

- name: Creating server.hcl file for server
  when: group_names[0] == "consul-server"
  template:
    src: server-hcl.j2
    dest: "{{ server_hcl_dest }}"
    owner: "{{ consul_owner }}"
    group: "{{ consul_group }}"
    mode: "{{ server_hcl_mode }}"

- name: Reloading systemd and restarting consul
  when: (group_names[0] == "consul-leader") or (group_names[0] == "consul-server") or (group_names[0] == "consul-client")
  command: /bin/true
  notify:
    - daemon_reload
    - restart_consul
